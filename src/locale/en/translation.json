{
    "toast": {
        "todoCreated": "Todo Created!",
        "todoUpdated": "Todo Updated!",
        "todoDeleted": "Todo Deleted!",
        "somethingWentWrong": "Something went wrong!"
    },
    "todoForm": {
        "validation": {
            "required": "You need to enter todo name!"
        },
        "title": {
            "placeholder": "Add Todo..."
        },
        "submit": "Add"
    },
    "todoItem": {
        "validation": {
            "titleRequired": "Title can't be empty!"
        },
        "title": {
            "placeholder": "Title"
        },
        "info": {
            "created": "Created",
            "completed": "Completed"
        },
        "submit": {
            "tooltip": "Edit title to save changes"
        },
        "deleteConfirm": {
            "text": "Are you sure you want to delete this todo?",
            "headerText": "Delete Todo",
            "cancelText": "Cancel",
            "confirmText": "Delete"
        }
    },
    "filters": {
        "tooltips": {
            "hideFilters": "Hide filters",
            "showFilters": "Show filters"
        },
        "search": {
            "placeholder": "Search"
        },
        "status": {
            "placeholder": "All statuses"
        },
        "options": {
            "active": "Active",
            "completed": "Completed"
        }
    },
    "settings": {
        "tooltips": {
            "goToHome": "Go to Home Page",
            "showInfo": "Show Info",
            "hideInfo": "Hide Info",
            "lightMode": "Light Mode",
            "darkMode": "Dark Mode"
        }
    },
    "widget": {
        "mobX": {
            "nameColumn": "Name",
            "descriptionColumn": "Description",
            "keyRoleColumn": "Key Role",
            "observable": "Observable",
            "computed": "Computed",
            "action": "Action",
            "reaction": "Reaction",
            "observableDescription": "Tracks changes to data structures, arrays, maps, sets, or primitive values. MobX monitors these for modifications.",
            "computedDescription": "Derived values that automatically update when the observables they depend on change. They are recalculated lazily.",
            "actionDescription": "Functions that modify observables. Actions make state changes predictable and manageable.",
            "reactionDescription": "Automatically runs side effects in response to observable changes, using functions like autorun and reaction.",
            "observableKeyrole": "Makes your data reactive.",
            "computedKeyrole": "Automatically updates based on observable changes.",
            "actionKeyrole": "Ensures predictable state updates.",
            "reactionKeyrole": "Updates the UI or triggers effects in response to state changes."
        },
        "jotai": {
            "nameColumn": "Name",
            "descriptionColumn": "Description",
            "keyRoleColumn": "Key Role",
            "atom": "Atom",
            "useAtom": "useAtom",
            "provider": "Provider",
            "derived": "Derived Atom",
            "atomDescription": "The basic unit of state in Jotai. Atoms are small pieces of state that can be read and written to.",
            "useAtomDescription": "A React hook that returns a tuple of [value, setValue] for reading and writing to an atom.",
            "providerDescription": "A context provider that allows you to create a new scope for atoms, useful for testing or creating isolated state.",
            "derivedDescription": "Atoms that derive their value from other atoms, automatically updating when dependencies change.",
            "atomKeyrole": "Basic unit of state management.",
            "useAtomKeyrole": "Hook for reading and writing atom values.",
            "providerKeyrole": "Creates isolated state scopes.",
            "derivedKeyrole": "Creates computed values from other atoms.",
            "atomFamily": "Atom Family",
            "atomFamilyDescription": "A function that creates atoms with dynamic keys, useful for managing collections of atoms.",
            "atomFamilyKeyrole": "Manages collections of related atoms.",
            "selectAtom": "Select Atom",
            "selectAtomDescription": "Creates a derived atom that selects a specific part of another atom's value.",
            "selectAtomKeyrole": "Optimizes performance by selecting specific parts of state.",
            "splitAtom": "Split Atom",
            "splitAtomDescription": "Splits an array atom into individual atoms for each element, useful for list rendering.",
            "splitAtomKeyrole": "Optimizes list rendering performance.",
            "atomWithStorage": "Atom with Storage",
            "atomWithStorageDescription": "Creates an atom that persists its value in localStorage or sessionStorage.",
            "atomWithStorageKeyrole": "Enables state persistence across sessions.",
            "atomWithReset": "Atom with Reset",
            "atomWithResetDescription": "Creates an atom with a reset function to restore its initial value.",
            "atomWithResetKeyrole": "Provides state reset functionality.",
            "atomWithDefault": "Atom with Default",
            "atomWithDefaultDescription": "Creates an atom with a default value that's used when the atom is undefined.",
            "atomWithDefaultKeyrole": "Handles undefined atom values gracefully.",
            "atomWithObservable": "Atom with Observable",
            "atomWithObservableDescription": "Creates an atom that syncs with an external observable source.",
            "atomWithObservableKeyrole": "Integrates with external data sources.",
            "useAtomCallback": "useAtomCallback",
            "useAtomCallbackDescription": "A hook that creates a callback function with access to atom values and setters.",
            "useAtomCallbackKeyrole": "Enables atom access in callbacks.",
            "useAtomValue": "useAtomValue",
            "useAtomValueDescription": "A hook that only subscribes to atom value changes, ignoring setters.",
            "useAtomValueKeyrole": "Optimizes performance for read-only atom usage.",
            "useSetAtom": "useSetAtom",
            "useSetAtomDescription": "A hook that only provides the setter function for an atom.",
            "useSetAtomKeyrole": "Optimizes performance for write-only atom usage."
        }
    },
    "mainPlaceholder": {
        "title": "Select any state manager"
    },
    "todoList": {
        "notFound": "Not found"
    },
    "envPlaceholder": {
        "title": "Missing Environment Variables",
        "description": "Please create a .env file in the project root directory with the following variables:",
        "variables": {
            "apiKey": "REACT_APP_API_KEY=your-api-key",
            "protocol": "REACT_APP_PROTOCOL=https",
            "apiUrl": "REACT_APP_API_URL=.mockapi.io"
        },
        "where": "Where:",
        "apiKeyDesc": "your API server key",
        "apiUrlDesc": "URL for API requests",
        "protocolDesc": "protocol for API requests (http/https)",
        "createApi": "You can create API on mockapi.io"
    }
}