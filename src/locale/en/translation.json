{
    "toast": {
        "todoCreated": "Todo Created!",
        "todoUpdated": "Todo Updated!",
        "todoDeleted": "Todo Deleted!",
        "somethingWentWrong": "Something went wrong!"
    },
    "todoForm": {
        "validation": {
            "required": "You need to enter todo name!"
        },
        "title": {
            "placeholder": "Add Todo..."
        },
        "submit": "Add"
    },
    "todoItem": {
        "validation": {
            "titleRequired": "Title can't be empty!"
        },
        "title": {
            "placeholder": "Title"
        },
        "info": {
            "created": "Created",
            "completed": "Completed"
        },
        "submit": {
            "tooltip": "Edit title to save changes"
        },
        "deleteConfirm": {
            "text": "Are you sure you want to delete this todo?",
            "headerText": "Delete Todo",
            "cancelText": "Cancel",
            "confirmText": "Delete"
        }
    },
    "filters": {
        "tooltips": {
            "hideFilters": "Hide filters",
            "showFilters": "Show filters"
        },
        "search": {
            "placeholder": "Search"
        },
        "status": {
            "placeholder": "All statuses"
        },
        "options": {
            "active": "Active",
            "completed": "Completed"
        }
    },
    "settings": {
        "tooltips": {
            "goToHome": "Go to Home Page",
            "showInfo": "Show Info",
            "hideInfo": "Hide Info",
            "lightMode": "Light Mode",
            "darkMode": "Dark Mode"
        }
    },
    "widget": {
        "mobX": {
            "nameCulumn": "Name",
            "descriptionCulumn": "Description",
            "keyRoleColumn": "Key Role",
            "observable": "Observable",
            "computed": "Computed",
            "action": "Action",
            "reaction": "Reaction",
            "observableDescription": "Tracks changes to data structures, arrays, maps, sets, or primitive values. MobX monitors these for modifications.",
            "computedDescription": "Derived values that automatically update when the observables they depend on change. They are recalculated lazily.",
            "actionDescription": "Functions that modify observables. Actions make state changes predictable and manageable.",
            "reactionDescription": "Automatically runs side effects in response to observable changes, using functions like autorun and reaction.",
            "oservableKeyrole": "Makes your data reactive.",
            "computedKeyrole": "Automatically updates based on observable changes.",
            "actionKeyrole": "Ensures predictable state updates.",
            "reactionKeyrole": "Updates the UI or triggers effects in response to state changes."
        }
    },
    "mainPlaceholder": {
        "title": "Select any state manager"
    }
}